plugins {
    id "java"
}

group = "io.github.kale_ko"
version = project_version

repositories {
    maven {
        name = "Kales-Maven"
        url = "https://maven.kaleko.dev/public-snapshot/"
    }
    mavenCentral()
}

dependencies {
    implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"
    implementation "org.fusesource.jansi:jansi:${jansi_version}"

    implementation "io.netty:netty-all:${netty_version}"
    implementation "org.bouncycastle:bcprov-jdk18on:${bouncycastle_version}"
    implementation "org.bouncycastle:bcpkix-jdk18on:${bouncycastle_version}"
    implementation "com.aayushatharva.brotli4j:brotli4j:${brotli4j_version}"
    for (String natives : ["windows-x86_64", "windows-x86", "windows-aarch64", "windows-armv7", "linux-x86_64", "linux-x86", "windows-aarch64", "linux-armv7"]) {
        runtimeOnly "com.aayushatharva.brotli4j:native-${natives}:${brotli4j_version}"
    }

    compileOnly "org.jetbrains:annotations:24.0.1"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(java_version)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

jar {
    manifest {
        attributes "Name": "io/github/kale_ko/srd/",
                "Specification-Title": "SRD",
                "Specification-Version": version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.srd",
                "Implementation-Version": version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }
}

tasks.register("clientJar", Jar) {
    archiveClassifier = "client"
    manifest {
        attributes "Name": "io/github/kale_ko/srd/",
                "Main-Class": "io.github.kale_ko.srd.ShadedMain",
                "Shaded-Main-Class": "io.github.kale_ko.srd.ClientMain",
                "Specification-Title": "SRD",
                "Specification-Version": version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.srd",
                "Implementation-Version": version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output)
    from(configurations.runtimeClasspath)
}

tasks.register("serverJar", Jar) {
    dependsOn tasks.make

    archiveClassifier = "server"
    manifest {
        attributes "Name": "io/github/kale_ko/srd/",
                "Main-Class": "io.github.kale_ko.srd.ShadedMain",
                "Shaded-Main-Class": "io.github.kale_ko.srd.ServerMain",
                "Specification-Title": "SRD",
                "Specification-Version": version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.srd",
                "Implementation-Version": version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output)
    from(tasks.make.outputs.files)
    from(configurations.runtimeClasspath)
}

tasks.register("managerJar", Jar) {
    archiveClassifier = "manager"
    manifest {
        attributes "Name": "io/github/kale_ko/srd/",
                "Main-Class": "io.github.kale_ko.srd.ShadedMain",
                "Shaded-Main-Class": "io.github.kale_ko.srd.ManagerMain",
                "Specification-Title": "SRD",
                "Specification-Version": version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.srd",
                "Implementation-Version": version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output)
    from(configurations.runtimeClasspath)
}

import java.nio.file.Files
import java.nio.file.Path
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

static boolean isLinux() {
    return DefaultNativePlatform.getCurrentOperatingSystem().isLinux()
}

static boolean isWindows() {
    return DefaultNativePlatform.getCurrentOperatingSystem().isWindows()
}

static Path getExecutable(String name) {
    for (String dirS : System.getenv("PATH").split(File.pathSeparator)) {
        Path dir = Path.of(dirS)

        Path file = dir.resolve(name)
        if (Files.exists(file)) {
            return file
        }

        if (System.getenv("PATHEXT") != null) {
            for (String ext : System.getenv("PATHEXT").split(File.pathSeparator)) {
                Path file2 = dir.resolve(name + ext)
                if (Files.exists(file2)) {
                    return file2
                }
            }
        }
    }

    return null
}

static boolean isExecutable(String name) {
    return getExecutable(name) != null
}

static String getvcvarsall() {
    List<Path> directories = List.of(Path.of("C:\\Program Files\\Microsoft Visual Studio\\"), Path.of("C:\\Program Files (x86)\\Microsoft Visual Studio\\"))

    for (Path directory : directories) {
        if (Files.exists(directory)) {
            List<Path> installations = Files.list(directory).toList()

            for (Path installation : installations) {
                List<Path> versions = Files.list(installation).toList()

                for (Path version : versions) {
                    Path vcvarsallPath = version.resolve("VC\\Auxiliary\\Build\\vcvarsall.bat")

                    if (Files.exists(vcvarsallPath)) {
                        return vcvarsallPath.toString()
                    }
                }
            }
        }
    }

    throw new RuntimeException("No vsvarsall could be found!")
}

if (isLinux()) {
    tasks.register("make-linux-x86_64", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine "x86_64-linux-gnu-g++", rootPath.resolve("src/main/native/desktopCapture-linux.cpp").toString(), "-o", outPath.resolve("libDesktopCapture-linux-x86_64.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/x86_64-linux-gnu/", "-l", "X11", "-l", "Xrandr"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-x86_64.so")])
    }

    tasks.register("make-linux-x86", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine "i686-linux-gnu-g++", rootPath.resolve("src/main/native/desktopCapture-linux.cpp").toString(), "-o", outPath.resolve("libDesktopCapture-linux-x86.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/i686-linux-gnu/", "-l", "X11", "-l", "Xrandr"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-x86.so")])
    }

    tasks.register("make-linux-arm64", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine "aarch64-linux-gnu-g++", rootPath.resolve("src/main/native/desktopCapture-linux.cpp").toString(), "-o", outPath.resolve("libDesktopCapture-linux-arm64.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/aarch64-linux-gnu/", "-l", "X11", "-l", "Xrandr"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-arm64.so")])
    }

    tasks.register("make-linux-arm", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine "arm-linux-gnueabihf-g++", rootPath.resolve("src/main/native/desktopCapture-linux.cpp").toString(), "-o", outPath.resolve("libDesktopCapture-linux-arm.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/arm-linux-gnueabihf/", "-l", "X11", "-l", "Xrandr"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-arm.so")])
    }

    tasks.register("make-windows-mingw32-x86_64", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine "x86_64-w64-mingw32-g++-win32", rootPath.resolve("src/main/native/desktopCapture-windows.cpp").toString(), "-o", outPath.resolve("libDesktopCapture-windows-x86_64.dll").toString(), "-std=c++20", "-O2", "-static", "-shared", "-s", "-I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/x86_64-w64-mingw32/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("win32/").toString(), "-L", "/usr/x86_64-w64-mingw32/lib/", "-l", "gdi32"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-x86_64.dll")])
    }

    tasks.register("make-windows-mingw32-x86", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine "i686-w64-mingw32-g++-win32", rootPath.resolve("src/main/native/desktopCapture-windows.cpp").toString(), "-o", outPath.resolve("libDesktopCapture-windows-x86.dll").toString(), "-std=c++20", "-O2", "-static", "-shared", "-s", "-I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/i686-w64-mingw32/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("win32/").toString(), "-L", "/usr/i686-w64-mingw32/lib/", "-l", "gdi32"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-x86.dll")])
    }
}

if (isWindows()) {
    tasks.register("make-windows-x86_64", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine getvcvarsall(), "x64", "&&", "cl", "/nologo", "/utf-8", rootPath.resolve("src/main/native/desktopCapture-windows.cpp").toString(), "kernel32.lib", "user32.lib", "gdi32.lib", "/Fe:", outPath.resolve("libDesktopCapture-windows-x86_64.dll").toString(), "/std:c++20", "/EHsc", "/W4", "/wd4100", "/WX", "/O2", "/LD", "/I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "/I", includeDir.toString(), "/I", includeDir.resolve("win32/").toString(), "/link", "/WX", "/subsystem:console", "/debug:none"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-x86_64.dll")])
    }

    tasks.register("make-windows-x86", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine getvcvarsall(), "x64_x86", "&&", "cl", "/nologo", "/utf-8", rootPath.resolve("src/main/native/desktopCapture-windows.cpp").toString(), "kernel32.lib", "user32.lib", "gdi32.lib", "/Fe:", outPath.resolve("libDesktopCapture-windows-x86.dll").toString(), "/std:c++20", "/EHsc", "/W4", "/wd4100", "/WX", "/O2", "/LD", "/I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "/I", includeDir.toString(), "/I", includeDir.resolve("win32/").toString(), "/link", "/WX", "/subsystem:console", "/debug:none"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-x86.dll")])
    }

    tasks.register("make-windows-arm64", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine getvcvarsall(), "x64_arm64", "&&", "cl", "/nologo", "/utf-8", rootPath.resolve("src/main/native/desktopCapture-windows.cpp").toString(), "kernel32.lib", "user32.lib", "gdi32.lib", "/Fe:", outPath.resolve("libDesktopCapture-windows-arm64.dll").toString(), "/std:c++20", "/EHsc", "/W4", "/wd4100", "/WX", "/O2", "/LD", "/I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "/I", includeDir.toString(), "/I", includeDir.resolve("win32/").toString(), "/link", "/WX", "/subsystem:console", "/debug:none"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-arm64.dll")])
    }

    tasks.register("make-windows-arm", Exec) {
        dependsOn tasks.compileJava

        Path rootPath = rootDir.toPath().toAbsolutePath()
        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/").toAbsolutePath()
        Path outPath = rootPath.resolve("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        commandLine getvcvarsall(), "x64_arm", "&&", "cl", "/nologo", "/utf-8", rootPath.resolve("src/main/native/desktopCapture-windows.cpp").toString(), "kernel32.lib", "user32.lib", "gdi32.lib", "/Fe:", outPath.resolve("libDesktopCapture-windows-arm.dll").toString(), "/std:c++20", "/EHsc", "/W4", "/wd4100", "/WX", "/O2", "/LD", "/I", rootPath.resolve("build/generated/sources/headers/java/main").toString(), "/I", includeDir.toString(), "/I", includeDir.resolve("win32/").toString(), "/link", "/WX", "/subsystem:console", "/debug:none"
        workingDir outPath

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-arm.dll")])
    }
}

tasks.register("make") {
    if (System.getenv("GRADLE_NO_MAKE") != null) {
        List<Path> outputList = new ArrayList<>()
        Path nativesPath = Path.of("build/natives/")
        if (Files.exists(nativesPath)) {
            outputList.addAll(Files.list(nativesPath).toList())
            outputs.files(outputList)
        }
    } else {
        List<Task> taskList = new ArrayList<>()
        List<Path> outputList = new ArrayList<>()

        if (isLinux()) {
            if (isExecutable("x86_64-linux-gnu-g++")) {
                taskList.add(tasks["make-linux-x86_64"])
            } else {
                logger.log(LogLevel.WARN, "Missing compiler for x86_64 'g++-x86-64-linux-gnu'")
            }
            if (isExecutable("i686-linux-gnu-g++")) {
                taskList.add(tasks["make-linux-x86"])
            } else {
                logger.log(LogLevel.WARN, "Missing compiler for x86 'g++-i686-linux-gnu'")
            }
            if (isExecutable("aarch64-linux-gnu-g++")) {
                taskList.add(tasks["make-linux-arm64"])
            } else {
                logger.log(LogLevel.WARN, "Missing compiler for arm64 'g++-aarch64-linux-gnu'")
            }
            if (isExecutable("arm-linux-gnueabihf-g++")) {
                taskList.add(tasks["make-linux-arm"])
            } else {
                logger.log(LogLevel.WARN, "Missing compiler for arm 'g++-arm-linux-gnueabihf'")
            }

            if (isExecutable("x86_64-w64-mingw32-g++-win32")) {
                taskList.add(tasks["make-windows-mingw32-x86_64"])
            }
            if (isExecutable("i686-w64-mingw32-g++-win32")) {
                taskList.add(tasks["make-windows-mingw32-x86"])
            }
            if (isExecutable("x86_64-w64-mingw32-g++-win32") || isExecutable("i686-w64-mingw32-g++-win32")) {
                logger.log(LogLevel.WARN, "Building windows on linux should only be used for testing purposes!")
                logger.log(LogLevel.WARN, "Do note it also does not support arm!")
            }
        }
        if (isWindows()) {
            taskList.add(tasks["make-windows-x86_64"])
            taskList.add(tasks["make-windows-x86"])
            taskList.add(tasks["make-windows-arm64"])
            taskList.add(tasks["make-windows-arm"])
        }

        if (taskList.isEmpty()) {
            logger.log(LogLevel.ERROR, "No compilers where registered! Check logs")
        }

        for (Task task : taskList) {
            dependsOn task
            outputList.addAll(task.outputs.files.collect {
                it.toPath()
            })
        }

        outputs.files(outputList)
    }
}

build {
    finalizedBy tasks.clientJar
    finalizedBy tasks.serverJar
    finalizedBy tasks.managerJar
}