plugins {
    id "java"
}

group = "io.github.kale_ko"
version = project_version

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"
    implementation "org.fusesource.jansi:jansi:${jansi_version}"

    implementation "io.netty:netty-all:${netty_version}"
    implementation "org.bouncycastle:bcprov-jdk18on:${bouncycastle_version}"
    implementation "org.bouncycastle:bcpkix-jdk18on:${bouncycastle_version}"
    implementation "com.aayushatharva.brotli4j:brotli4j:${brotli4j_version}"
    for (String natives : ["windows-x86_64", "linux-x86_64"]) {
        runtimeOnly "com.aayushatharva.brotli4j:native-${natives}:${brotli4j_version}"
    }

    compileOnly "org.jetbrains:annotations:24.0.1"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(java_version)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

jar {
    manifest {
        attributes "Name": "io/github/kale_ko/srd/",
                "Specification-Title": "SRD",
                "Specification-Version": version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.srd",
                "Implementation-Version": version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }
}

tasks.register("clientJar", Jar) {
    archiveClassifier = "client"
    manifest {
        attributes "Name": "io/github/kale_ko/srd/",
                "Main-Class": "io.github.kale_ko.srd.ShadedMain",
                "Shaded-Main-Class": "io.github.kale_ko.srd.ClientMain",
                "Specification-Title": "SRD",
                "Specification-Version": version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.srd",
                "Implementation-Version": version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output)
    from(configurations.runtimeClasspath)
}

tasks.register("serverJar", Jar) {
    dependsOn tasks.findNatives

    archiveClassifier = "server"
    manifest {
        attributes "Name": "io/github/kale_ko/srd/",
                "Main-Class": "io.github.kale_ko.srd.ShadedMain",
                "Shaded-Main-Class": "io.github.kale_ko.srd.ServerMain",
                "Specification-Title": "SRD",
                "Specification-Version": version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.srd",
                "Implementation-Version": version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output)
    from(tasks.findNatives.outputs.files)
    from(configurations.runtimeClasspath)
}

tasks.register("managerJar", Jar) {
    dependsOn tasks.findNatives

    archiveClassifier = "manager"
    manifest {
        attributes "Name": "io/github/kale_ko/srd/",
                "Main-Class": "io.github.kale_ko.srd.ShadedMain",
                "Shaded-Main-Class": "io.github.kale_ko.srd.ManagerMain",
                "Specification-Title": "SRD",
                "Specification-Version": version,
                "Specification-Vendor": "Kale-Ko",
                "Implementation-Title": "io.github.kale_ko.srd",
                "Implementation-Version": version,
                "Implementation-Vendor": "Kale-Ko",
                "Sealed": true
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output)
    from(configurations.runtimeClasspath)
}

tasks.register("findNatives", Copy) {

}

import java.nio.file.Files
import java.nio.file.Path

static boolean isLinux() {
    return System.getProperty("os.name").toLowerCase().startsWith("linux")
}

static boolean isWindows() {
    return System.getProperty("os.name").toLowerCase().startsWith("windows")
}

static Path getExecutable(String name) {
    for (String dirS : System.getenv("PATH").split(File.pathSeparator)) {
        Path dir = Path.of(dirS)

        Path file = dir.resolve(name)
        if (Files.exists(file)) {
            return file
        }

        if (System.getenv("PATHEXT") != null) {
            for (String ext : System.getenv("PATHEXT").split(File.pathSeparator)) {
                Path file2 = dir.resolve(name + ext)
                if (Files.exists(file2)) {
                    return file2
                }
            }
        }
    }

    return null
}

static boolean isExecutable(String name) {
    return getExecutable(name) != null
}

static Path getClPath() {
    return getExecutable("cl").getParent().resolve("cl.exe")
}

static Path getClX86Path() {
    return getClPath().getParent().getParent().resolve("x86\\cl.exe")
}

static Path getClX64Path() {
    return getClPath().getParent().getParent().resolve("x64\\cl.exe")
}

if (isLinux()) {
    tasks.register("make-linux-x86_64", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable "x86_64-linux-gnu-g++"
        args "src/main/native/desktopCapture-linux.cpp", "-o", outPath.resolve("libDesktopCapture-linux-x86_64.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/x86_64-linux-gnu/", "-l", "X11", "-l", "Xrandr"
        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-x86_64.so")])
    }

    tasks.register("make-linux-x86", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable "i686-linux-gnu-g++"
        args "src/main/native/desktopCapture-linux.cpp", "-o", outPath.resolve("libDesktopCapture-linux-x86.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/i686-linux-gnu/", "-l", "X11", "-l", "Xrandr"
        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-x86.so")])
    }

    tasks.register("make-linux-arm64", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable "aarch64-linux-gnu-g++"
        args "src/main/native/desktopCapture-linux.cpp", "-o", outPath.resolve("libDesktopCapture-linux-arm64.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/aarch64-linux-gnu/", "-l", "X11", "-l", "Xrandr"
        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-arm64.so")])
    }

    tasks.register("make-linux-arm", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable "arm-linux-gnueabi-g++"
        args "src/main/native/desktopCapture-linux.cpp", "-o", outPath.resolve("libDesktopCapture-linux-arm.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/arm-linux-gnueabi/", "-l", "X11", "-l", "Xrandr"
        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-arm.so")])
    }

    tasks.register("make-linux-armhf", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable "arm-linux-gnueabihf-g++"
        args "src/main/native/desktopCapture-linux.cpp", "-o", outPath.resolve("libDesktopCapture-linux-armhf.so").toString(), "-std=c++20", "-O2", "-shared", "-s", "-I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("linux/").toString(), "-L", "/usr/lib/arm-linux-gnueabihf/", "-l", "X11", "-l", "Xrandr"
        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-linux.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-linux-armhf.so")])
    }

    tasks.register("make-windows-mingw32-x86_64", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable "x86_64-w64-mingw32-g++-win32"
        args "src/main/native/desktopCapture-windows.cpp", "-o", outPath.resolve("libDesktopCapture-windows-x86_64.dll").toString(), "-std=c++20", "-O2", "-static", "-shared", "-s", "-I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/x86_64-w64-mingw32/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("win32/").toString(), "-L", "/usr/x86_64-w64-mingw32/lib/", "-l", "gdi32"
        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-x86_64.dll")])
    }

    tasks.register("make-windows-mingw32-x86", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable "i686-w64-mingw32-g++-win32"
        args "src/main/native/desktopCapture-windows.cpp", "-o", outPath.resolve("libDesktopCapture-windows-x86.dll").toString(), "-std=c++20", "-O2", "-static", "-shared", "-s", "-I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "-I", "/usr/i686-w64-mingw32/include/", "-I", includeDir.toString(), "-I", includeDir.resolve("win32/").toString(), "-L", "/usr/i686-w64-mingw32/lib/", "-l", "gdi32"

        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-x86.dll")])
    }
}

if (isWindows()) {
    tasks.register("make-windows-x86_64", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable getClX64Path()
        args "src/main/native/desktopCapture-windows.cpp", "kernel32.lib", "user32.lib", "gdi32.lib", "/Fe:", outPath.resolve("libDesktopCapture-windows-x86_64.dll").toString(), "/std:c++20", "/EHsc", "/O2", "/LD", "/I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "/I", includeDir.toString(), "/I", includeDir.resolve("win32/").toString()
        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-x86_64.dll")])
    }

    tasks.register("make-windows-x86", Exec) {
        dependsOn tasks.compileJava

        Path includeDir = Path.of(System.getProperty("java.home")).resolve("include/")
        Path outPath = Path.of("build/natives/")

        doFirst {
            Files.createDirectories(outPath)
        }

        executable getClX86Path()
        args "src/main/native/desktopCapture-windows.cpp", "kernel32.lib", "user32.lib", "gdi32.lib", "/Fe:", outPath.resolve("libDesktopCapture-windows-x86_64.dll").toString(), "/std:c++20", "/EHsc", "/O2", "/LD", "/I", rootDir.toPath().resolve("build/generated/sources/headers/java/main").toString(), "/I", includeDir.toString(), "/I", includeDir.resolve("win32/").toString()
        workingDir rootDir

        inputs.files(["src/main/native/desktopCapture-windows.cpp", "src/main/native/desktopCapture-common.cpp"])
        outputs.files([outPath.resolve("libDesktopCapture-windows-x86.dll")])
    }
}

tasks.register("make") {
    int registered = 0

    if (isLinux()) {
        if (isExecutable("x86_64-linux-gnu-g++")) {
            dependsOn tasks["make-linux-x86_64"]
            registered++
        } else {
            logger.log(LogLevel.WARN, "Missing compiler for x86_64 'g++-x86-64-linux-gnu'")
        }
        if (isExecutable("i686-linux-gnu-g++")) {
            dependsOn tasks["make-linux-x86"]
            registered++
        } else {
            logger.log(LogLevel.WARN, "Missing compiler for x86 'g++-i686-linux-gnu'")
        }
        if (isExecutable("aarch64-linux-gnu-g++")) {
            dependsOn tasks["make-linux-arm64"]
            registered++
        } else {
            logger.log(LogLevel.WARN, "Missing compiler for arm64 'g++-aarch64-linux-gnu'")
        }
        if (isExecutable("arm-linux-gnueabi-g++")) {
            dependsOn tasks["make-linux-arm"]
            registered++
        } else {
            logger.log(LogLevel.WARN, "Missing compiler for arm 'g++-arm-linux-gnueabi'")
        }
        if (isExecutable("arm-linux-gnueabihf-g++")) {
            dependsOn tasks["make-linux-armhf"]
            registered++
        } else {
            logger.log(LogLevel.WARN, "Missing compiler for armhf 'g++-arm-linux-gnueabihf'")
        }

        if (isExecutable("x86_64-w64-mingw32-g++-win32")) {
            dependsOn tasks["make-windows-mingw32-x86_64"]
            registered++
        }
        if (isExecutable("i686-w64-mingw32-g++-win32")) {
            dependsOn tasks["make-windows-mingw32-x86"]
            registered++
        }
        if (isExecutable("x86_64-w64-mingw32-g++-win32") || isExecutable("i686-w64-mingw32-g++-win32")) {
            doFirst {
                logger.log(LogLevel.WARN, "Building windows on linux should only be used for testing purposes!")
                logger.log(LogLevel.WARN, "Do note it also does not support arm!")
            }
        }
    }
    if (isWindows()) {
        if (isExecutable("cl")) {
            dependsOn tasks["make-windows-x86_64"]
            dependsOn tasks["make-windows-x86"]
            registered += 2
        } else {
            logger.log(LogLevel.ERROR, "Missing windows compiler 'cl'")
        }
    }

    if (registered == 0) {
        logger.log(LogLevel.ERROR, "No compilers where registered! Check logs")
    }
}

build {
    finalizedBy tasks.clientJar
    finalizedBy tasks.serverJar
    finalizedBy tasks.managerJar
}